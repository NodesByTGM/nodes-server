# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release and Deploy to EC2

on:
    push:
        branches: ["dev"]

jobs:
    release:
        name: Release
        runs-on: ubuntu-latest
        permissions:
            contents: write # to be able to publish a GitHub release
            issues: write # to be able to comment on released issues
            pull-requests: write # to be able to comment on released pull requests
            id-token: write # to enable use of OIDC for npm provenance
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Setup Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: "lts/*"
            - name: Install dependencies
              run: yarn install
            # - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
            #   run: yarn audit
            - name: Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: npx semantic-release
    deploy:
        # runs-on: ubuntu-latest
        runs-on: ubuntu-latest
        # if: github.ref == 'refs/heads/dev'

        strategy:
            matrix:
                node-version: [20.x]
                # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

        steps:
            - uses: actions/checkout@v2
            - run: npm ci
            - run: npm run build --if-present
            # - run: npm test
            - name: rsync deployments
              uses: burnett01/rsync-deployments@6.0.0
              with:
                  switches: -avzr --delete -v
                  path: ./*
                  remote_path: ${{ secrets.PATH }}
                  remote_host: ${{ secrets.HOST }}
                  remote_user: ${{ secrets.USER }}
                  remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
